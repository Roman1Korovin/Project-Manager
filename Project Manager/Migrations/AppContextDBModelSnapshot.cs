// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Manager.Data;

#nullable disable

namespace Project_Manager.Migrations
{
    [DbContext(typeof(AppContextDB))]
    partial class AppContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project_Manager.Models.Domain.CustomerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("CustomerCompanies");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.EmployeeOnProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeOnProjects");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.ExecutorCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ExecutorCompanies");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerCompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutorCompanyID")
                        .HasColumnType("int");

                    b.Property<int>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCompanyID");

                    b.HasIndex("ExecutorCompanyID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Projects", t =>
                        {
                            t.HasCheckConstraint("CK_Project_Priority", "[Priority] BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.EmployeeOnProject", b =>
                {
                    b.HasOne("Project_Manager.Models.Domain.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Manager.Models.Domain.Project", "Project")
                        .WithMany("EmployeesOnProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.Project", b =>
                {
                    b.HasOne("Project_Manager.Models.Domain.CustomerCompany", "CustomerCompany")
                        .WithMany("ProjectAsCustomer")
                        .HasForeignKey("CustomerCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_Manager.Models.Domain.ExecutorCompany", "ExecutorCompany")
                        .WithMany("ProjectAsExecutor")
                        .HasForeignKey("ExecutorCompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Project_Manager.Models.Domain.Employee", "Manager")
                        .WithMany("ManagerProjects")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerCompany");

                    b.Navigation("ExecutorCompany");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.CustomerCompany", b =>
                {
                    b.Navigation("ProjectAsCustomer");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.Employee", b =>
                {
                    b.Navigation("EmployeeProjects");

                    b.Navigation("ManagerProjects");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.ExecutorCompany", b =>
                {
                    b.Navigation("ProjectAsExecutor");
                });

            modelBuilder.Entity("Project_Manager.Models.Domain.Project", b =>
                {
                    b.Navigation("EmployeesOnProject");
                });
#pragma warning restore 612, 618
        }
    }
}
