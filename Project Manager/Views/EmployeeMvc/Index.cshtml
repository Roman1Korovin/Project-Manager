@using Project_Manager.DTOs
@model List<EmployeeDTO>

@{
    ViewData["Title"] = "Список сотрудников";
    ViewData["SortColumn"] = ViewData["SortColumn"] ?? "FullName";
    ViewData["SortDirection"] = ViewData["SortDirection"] ?? "asc";
}


<h2>Список сотрудников</h2>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}


<p>
    <a asp-action="Create" class="btn btn-primary">Добавить сотрудника</a>
</p>

<div id="employeesTableContainer"  style="max-height: 500px; overflow-y: auto;">
    @await Html.PartialAsync("EmployeesTable", Model)
 </div>



<!-- AJAX script for sorting  -->
@section Scripts {
    <script>

    let currentSortColumn = '@ViewData["SortColumn"]';
    let currentSortDirection = '@ViewData["SortDirection"]';

    //Tracks clicks on any element with class .sort-link
    $(document).on('click', '.sort-link', function(e){
        //Cancels page reload
        e.preventDefault();
        
        // Get column from clicked link
        let column = $(this).data('column');

        //If clicked on same column, invert direction.
        if(column === currentSortColumn){
            currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else { //Otherwise sort by new column, default direction is asc
            currentSortColumn = column;
            currentSortDirection = 'asc';
        }        

        //Sends GET request to EmployeesTablePartial
        $.get('@Url.Action("EmployeesTablePartial")',
               { sortColumn: currentSortColumn, sortDirection: currentSortDirection },       
               function(data){
				   $('#employeesTableContainer').html(data); //Changes employeesTableContainer content to new HTML
        });
    });
</script>
}
