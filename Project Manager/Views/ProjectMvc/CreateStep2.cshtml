@using Project_Manager.DTOs
@model Step2DTO

@{
    ViewData["Title"] = "Создание проекта - Шаг 2";
}

<h2>Создание проекта - Шаг 2/5</h2>

<form asp-action="CreateStep2" method="post">
    @Html.AntiForgeryToken()

    <!-- Customer company -->
    <div class="mb-3">
        <label asp-for="CustomerCompanyID" class="form-label">Компания-заказчик</label>
        <select asp-for="CustomerCompanyID" class="form-select" asp-items="ViewBag.CustomerCompanies" id="customerSelect">
            <option value="">-- Выберите компанию --</option>
        </select>

        <div class="mt-2">
            <input asp-for="NewCustomerCompanyName" class="form-control" placeholder="Или введите новую компанию" id="newCustomerInput" />
            <span asp-validation-for="NewCustomerCompanyName" class="text-danger"></span>
        </div>

        <span asp-validation-for="CustomerCompanyID" class="text-danger"></span>
    </div>

    <!-- Executor company -->
    <div class="mb-3">
        <label asp-for="ExecutorCompanyID" class="form-label">Компания-исполнитель</label>
        <select asp-for="ExecutorCompanyID" class="form-select" asp-items="ViewBag.ExecutorCompanies" id="executorSelect">
            <option value="">-- Выберите компанию --</option>
        </select>

        <div class="mt-2">
            <input asp-for="NewExecutorCompanyName" class="form-control" placeholder="Или введите новую компанию" id="newExecutorInput" />
            <span asp-validation-for="NewExecutorCompanyName" class="text-danger"></span>
        </div>

        <span asp-validation-for="ExecutorCompanyID" class="text-danger"></span>
    </div>


    <button type="submit" class="btn btn-primary">Далее</button>
    <a asp-action="CreateStep1" class="btn btn-secondary">Назад</a>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const customerSelect = document.getElementById("customerSelect");
        const newCustomerInput = document.getElementById("newCustomerInput");
        const executorSelect = document.getElementById("executorSelect");
        const newExecutorInput = document.getElementById("newExecutorInput");

        // block access to new  customer company's input field if something is selected in the select field
        function toggleCustomerInput() {
            const selected = customerSelect.value;
            newCustomerInput.disabled = !!selected;
            if (selected) newCustomerInput.value = "";
        }
        // block access to new executor company's input field if something is selected in the select field
        function toggleExecutorInput() {
            const selected = executorSelect.value;
            newExecutorInput.disabled = !!selected;
            if (selected) newExecutorInput.value = "";
        }

        // Initialization on page loading
        toggleCustomerInput();
        toggleExecutorInput();

       // event is triggered when user changes the selection in select customer field 
        customerSelect.addEventListener("change", toggleCustomerInput);
        newCustomerInput.addEventListener("input", function() {
            customerSelect.disabled = this.value.trim() !== "";
            if (this.value.trim() !== "") customerSelect.value = "";
        });
         // event is triggered when user changes the selection in select executor field
         executorSelect.addEventListener("change", toggleExecutorInput);
        newExecutorInput.addEventListener("input", function() {
            executorSelect.disabled = this.value.trim() !== "";
            if (this.value.trim() !== "") executorSelect.value = "";
        });
    </script>
}
